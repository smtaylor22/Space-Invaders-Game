;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |Exercise 98|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/image)
(require 2htdp/universe)

; Graphical Constants
;Background

(define BACKGROUND (overlay/align
                    "right" "top"
                    (circle 40 "solid" "Medium Cyan")
                    (rectangle 200 300 "solid" "Dark Purple")))


; UFO image 
(define UFO-IMAGE (overlay/align
                   "middle" "top"
                   (ellipse 20 10 "solid" "blue")
                   (ellipse 40 20 "solid" "green")))

; Missile image
(define MISSILE-IMAGE (above
                       (isosceles-triangle 8 30 "solid" "red") 
                       (overlay/align/offset
                       "middle" "bottom"               
                       (rectangle 3 10 "solid" "white")
                       0 3
                       (triangle 7 "solid" "yellow"))))
                       
; Tank image
(define TANK-IMAGE (above
                    (rectangle 7 15 "solid" "black")
                    (underlay/align/offset
                    "middle" "top"
                    (rectangle 55 15 "solid" "seagreen")
                    0 -11
                    (ellipse 30 25 "solid" "seagreen"))
                    ; Wheels
                    (beside          
                       (circle 5 "solid" "black")
                       (rectangle 3 8 0 "transparent")
                       (circle 5 "solid" "black")
                       (rectangle 3 8 0 "transparent")
                       (circle 5 "solid" "black")
                       (rectangle 3 8 0 "transparent")
                       (circle 5 "solid" "black"))))
; Tank Y location
(define Y-TANK 270) 
;----------------------------------------------------


; A UFO is a Posn. 
; interpretation (make-posn x y) is the UFO's location 
; (using the top-down, left-to-right convention)
 
(define-struct tank [loc vel])
; A Tank is a structure:
;   (make-tank Number Number). 
; interpretation (make-tank x dx) specifies the position:
; (x, HEIGHT) and the tank's speed: dx pixels/tick 
 
; A Missile is a Posn. 
; interpretation (make-posn x y) is the missile's place

(define-struct aim [ufo tank])
(define-struct fired [ufo tank missile])
; A SIGS is one of: 
; – (make-aim UFO Tank)
; – (make-fired UFO Tank Missile)
; interpretation represents the complete state of a 
; space invader game


; Tank Image -> Image 
; adds t to the given image im
; t is either aim-tank or fired-tank
(define (tank-render t im)
  (place-image TANK-IMAGE (tank-loc t) Y-TANK im))
#|
  ; make-aim or make-fired
  (make-t
   (make-tank (-tank loc t-vel))
   im))
|#
 
; UFO Image -> Image 
; adds u to the given image im
(define (ufo-render u im)
  (place-image UFO-IMAGE (posn-x u) (posn-y u) im))

#|
(make-u
   make-posn u-x u-y)
  im)
|#

; Missile Image -> Image 
; adds m to the given image im
(define (missile-render m im)
  (place-image MISSILE-IMAGE (posn-x m) (posn-y m) im))
#|
  (make-m
   ufo-m tank-m (make-posn m-x m-y)
   im)
|#

; SIGS -> Image
; renders the given game state on top of BACKGROUND 
; for examples see figure 32
(define (si-render s)
  (cond
    [(aim? s)
     (tank-render (aim-tank s)
                  (ufo-render (aim-ufo s) BACKGROUND))]
    [(fired? s)
     (tank-render
       (fired-tank s)
       (ufo-render (fired-ufo s)
                   (missile-render (fired-missile s)
                                   BACKGROUND)))]))
(define (si-move w)
  (si-move-proper w (random ...)))
 
; SIGS Number -> SIGS 
; moves the space-invader objects predictably by delta
(define (si-move-proper w delta)
  w)

; SIGS -> Boolean
; Stops the game if the ufo lands or the missle hits a ufo
; (define (stop-when s) boolean)
(define (si-stop s)
    (cond
      [(aim? s) (> (posn-y (aim-ufo s)) 290)]
      [(fired? s)
       (cond
         [(> (posn-y (fired-ufo s)) 290) #true]
         [(and
           (and (< (- (posn-x (fired-ufo s)) (posn-x (fired-missile s))) 10)
                (< (- (posn-y (fired-ufo s)) (posn-y (fired-missile s))) 10))
           (and (> (- (posn-x (fired-ufo s)) (posn-x (fired-missile s))) 0)
                (> (- (posn-y (fired-missile s)) (posn-y (fired-ufo s))) 0))) #true]
         [else #false])]))
         
; SIGS - Posn
; gets a position of SIGS tank ufo or missle
; (define (get-position s) x,y)



;SIGS State -> SIGS State
; Manages SIGS ands Updates the SIGS state
; Places tanks, ufos and missiles on screen
; (define space-invaders SIGS) SIGS)
(define (space-invaders s)
  (big-bang s
    ;[on-tick si-move]
    [to-draw si-render]
    ;[on-key si-control]
    [stop-when si-stop]
    ))


; ---------------
(define s1 (make-aim
  (make-posn 10 291)
  (make-tank 28 -3)))

(define s
  (make-fired
   (make-posn 30 100)
   (make-tank 100 3)
   (make-posn 20 115)))
  
(si-render s)
(si-stop s)


  

